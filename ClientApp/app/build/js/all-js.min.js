angular.module("EmediCodesApplication",["ui.router","ui.router.stateHelper","ui.bootstrap","ui.grid","ui.grid.selection","toaster","auth0.auth0"]);
!function(){function Configuration($stateProvider,$locationProvider,$urlRouterProvider,angularAuth0Provider,stateHelperProvider){angularAuth0Provider.init({clientID:AUTH0_CLIENT_ID,domain:AUTH0_DOMAIN,responseType:"token id_token",audience:"https://"+AUTH0_DOMAIN+"/userinfo",redirectUri:AUTH0_CALLBACK_URL,scope:"openid profile"}),stateHelperProvider.state({name:"login",url:"/login",templateUrl:"ClientApp/app/login/login.component.html"}).state({name:"callback",url:"/callback",templateUrl:"ClientApp/app/callback/callback.component.html"}).state({name:"register",url:"/register",templateUrl:"ClientApp/app/register/register.component.html"}).state({name:"payment",url:"/payment",templateUrl:"ClientApp/app/payment/payment.component.html"}).state({name:"app",url:"/app",templateUrl:"ClientApp/app/app.component.html",children:[{name:"case-list",url:"/case-list",templateUrl:"ClientApp/app/case/case-list.component.html"},{name:"disease-site",url:"/disease-site",templateUrl:"ClientApp/app/disease-site/disease-site.component.html"},{name:"cpt-list",url:"/cpt-list",templateUrl:"ClientApp/app/cpt/cpt-list.component.html"},{name:"icd-10",url:"/icd-10",templateUrl:"ClientApp/app/icd10/icd-10.component.html"},{name:"cpt",url:"/cpt",templateUrl:"ClientApp/app/cpt/cpt.component.html"},{name:"create-case",url:"/create-case",templateUrl:"ClientApp/app/case/create-case.component.html"},{name:"case",url:"/case",templateUrl:"ClientApp/app/case/case.component.html"},{name:"modality",url:"/modality",templateUrl:"ClientApp/app/modality/modality.component.html"},{name:"locale",url:"/locale",templateUrl:"ClientApp/app/locale/locale.component.html"},{name:"treatment-summary",url:"/treatment-summary",templateUrl:"ClientApp/app/treatment-summary/treatment-summary.component.html"},{name:"profile",url:"/profile",templateUrl:"ClientApp/app/profile/profile.component.html"},{name:"bugs",url:"/bugs",templateUrl:"ClientApp/app/bug-reporting/bug-reporting.component.html"},{name:"invalid-subscription",url:"/invalid-subscription",templateUrl:"ClientApp/app/invalid-subscription/invalid-subscription.component.html"}]}),$urlRouterProvider.otherwise("/login")}angular.module("EmediCodesApplication").config(Configuration),Configuration.$inject=["$stateProvider","$locationProvider","$urlRouterProvider","angularAuth0Provider","stateHelperProvider"]}();
!function(){function AppController($scope,EMIService,authService){var defaultRequestHeaders={headers:{"Content-Type":"application/json",Authorization:"Bearer "+localStorage.getItem("id_token")}};authService.getProfile(),$scope.$on("Auth0IDSet",function(){EMIService.GetUserProfile(EMIService.Auth0ID,defaultRequestHeaders).then(function(response){$scope.UserProfile=response.data,EMIService.UserID=response.data.Id,localStorage.setItem("UserID",EMIService.UserID),EMIService.CheckUserSubscription(EMIService.UserID,defaultRequestHeaders).then(function(response){localStorage.setItem("ValidSubscription",response.data.ValidSubscription),response.data.ValidSubscription||$state.go("app.invalid-subscription")}),EMIService.CheckFreeTrialPeriod(EMIService.UserID,defaultRequestHeaders).then(function(response){localStorage.setItem("InFreeTrialPeriod",response.data.InFreeTrial),response.data.InFreeTrial&&($scope.ShowFreeTrialBanner=response.data.InFreeTrial,EMIService.GetFreeTrialPeriodAmount(EMIService.UserID,defaultRequestHeaders).then(function(response){$scope.FreeTrialPeriodAmmount=response.data.FreeTrialDays}).catch(function(err){console.log(err)}))})})}),$scope.LogOut=function(){authService.logout()}}angular.module("EmediCodesApplication").controller("AppCtrl",AppController),AppController.$inject=["$scope","EMIService","authService"]}();
!function(){"use strict";function run(callBackService){callBackService.handleAuthentication()}angular.module("EmediCodesApplication").run(run),run.$inject=["callBackService"]}();
var AUTH0_CLIENT_ID="0EZIcV269TVtr86Ir8ndhr12lmduGkzB",AUTH0_DOMAIN="emedicodes.auth0.com",AUTH0_CALLBACK_URL="https://www.app.emedicodes.com/#/callback";
!function(){function CallBackController($scope,$state,callBackService){callBackService.handleAuthentication()}angular.module("EmediCodesApplication").controller("CallBackCtrl",CallBackController),CallBackController.$inject=["$scope","$state","callBackService"]}();
!function(){function CasesController($scope,EMIService,$state,authService,toaster,$uibModal){var defaultRequestHeaders={headers:{"Content-Type":"application/json",Authorization:"Bearer "+localStorage.getItem("id_token")}};authService.ValidateAuthorization(defaultRequestHeaders.headers);var UserID=localStorage.getItem("UserID");$scope.ViewCase=function(CaseID){EMIService.SelectedCaseID=CaseID,$state.go("app.case")},$scope.DeleteCase=function(CaseID){EMIService.deleteSelectedCaseID=CaseID;$uibModal.open({size:"md",templateUrl:"ClientApp/app/modals/delete-case/delete-case.modal.html",controller:"DeleteCaseModalCtrl"})},null===UserID&&void 0===UserID||EMIService.GetUserCaseList(UserID,defaultRequestHeaders).then(function(response){EMIService.serviceUserCaseList=response,$scope.UserCaseList=EMIService.serviceUserCaseList.data}).catch(function(error){toaster.error(error)}),EMIService.GetUserCaseList(UserID,defaultRequestHeaders).then(function(response){EMIService.serviceUserCaseList=response,$scope.UserCaseList=EMIService.serviceUserCaseList.data}).catch(function(error){toaster.error(error)}),$scope.goToCaseForm=function(){$state.go("app.create-case")}}angular.module("EmediCodesApplication").controller("CasesCtrl",CasesController),CasesController.$inject=["$scope","EMIService","$state","authService","toaster","$uibModal"]}();
!function(){function CaseController($scope,authService,EMIService,$state,toaster){function CalculateTotalTreatmentCost(CaseCodesData){for(var totalTreatmentCost=0,x=0;x<CaseCodesData.length;x++)totalTreatmentCost+=CaseCodesData[x].treatment_cost;return totalTreatmentCost}var defaultRequestHeaders={headers:{"Content-Type":"application/json",Authorization:"Bearer "+localStorage.getItem("id_token")}};authService.ValidateAuthorization(defaultRequestHeaders.headers);var CaseID=EMIService.SelectedCaseID;EMIService.GetGPCI(defaultRequestHeaders).success(function(response){EMIService.serviceGPCI=response,$scope.GPCILocality=EMIService.serviceGPCI}).catch(function(error){toaster.error(error)}),$scope.CaseSummaryRequest={treatment_setting:"Hospital",locality:"National",scope:"National"};var data=JSON.stringify($scope.CaseSummaryRequest);$scope.treatment_cost=0,EMIService.GetCaseCodeSummary(CaseID,data,defaultRequestHeaders).then(function(response){EMIService.serviceCaseCodeSummary=response,$scope.CaseSummary=EMIService.serviceCaseCodeSummary.data,$scope.TotalTreatmentCost=CalculateTotalTreatmentCost($scope.CaseSummary)}).catch(function(error){toaster.error(error)}),$scope.toggleTreatmentAmount=function(index,action){var currentRow=$scope.CaseSummary[index];"plus"===action?(currentRow.number_of_treatments++,currentRow.treatment_cost=currentRow.payment_rate*currentRow.number_of_treatments,$scope.CaseSummary[index]=currentRow,$scope.TotalTreatmentCost=CalculateTotalTreatmentCost($scope.CaseSummary)):"minus"===action&&(currentRow.treatment_cost=currentRow.treatment_cost-currentRow.payment_rate,currentRow.number_of_treatments--,$scope.CaseSummary[index]=currentRow,$scope.TotalTreatmentCost=CalculateTotalTreatmentCost($scope.CaseSummary))},$scope.onSettingsChange=function(){$scope.CaseSummaryRequest.treatment_setting=$scope.TreatmentSetting;var data=JSON.stringify($scope.CaseSummaryRequest);EMIService.GetCaseCodeSummary(CaseID,data,defaultRequestHeaders).then(function(response){EMIService.serviceCaseCodeSummary=response,$scope.CaseSummary=EMIService.serviceCaseCodeSummary.data}).catch(function(error){toaster.error(error)})},$scope.onLocaleChange=function(){if("NATIONAL"===$scope.GPCI){$scope.CaseSummaryRequest.locality="National",$scope.CaseSummaryRequest.scope="National";var data=JSON.stringify($scope.CaseSummaryRequest);EMIService.GetCaseCodeSummary(CaseID,data,defaultRequestHeaders).then(function(response){EMIService.serviceCaseCodeSummary=response,$scope.CaseSummary=EMIService.serviceCaseCodeSummary.data}).catch(function(error){toaster.error(error)})}else if("Hospital"===$scope.CaseSummaryRequest.treatment_setting)toaster.error("Please choose a different setting to change the location");else{$scope.CaseSummaryRequest.locality=$scope.GPCI,$scope.CaseSummaryRequest.scope="Regional";var sData=JSON.stringify($scope.CaseSummaryRequest);EMIService.GetCaseCodeSummary(CaseID,sData,defaultRequestHeaders).then(function(response){EMIService.serviceCaseCodeSummary=response,$scope.CaseSummary=EMIService.serviceCaseCodeSummary.data}).catch(function(error){toaster.error(error)})}}}angular.module("EmediCodesApplication").controller("CaseCtrl",CaseController),CaseController.$inject=["$scope","authService","EMIService","$state","toaster"]}();
!function(){function CaseFormController($scope,EMIService,authService,$state,toaster){var defaultRequestHeaders={headers:{"Content-Type":"application/json",Authorization:"Bearer "+localStorage.getItem("id_token")}};authService.ValidateAuthorization(defaultRequestHeaders.headers),$scope.Cancel=function(){$state.go("CaseList")},$scope.SearchCodeGrid={multiSelect:!0,enableRowSelection:!0,columnDefs:[{field:"CPT1__HCPCS",displayName:"HCPCS/CPT"},{field:"Description",displayName:"Description"}]},$scope.CodeGrid={multiSelect:!0,enableRowSelection:!0,columnDefs:[{field:"CPT1__HCPCS",displayName:"HCPCS/CPT"},{field:"Description",displayName:"Description"}]},$scope.searchMPFSByCPT=function(){null===$scope.SearchValue||void 0===$scope.SearchValue?toaster.error("Please input a CPT code or partial CPT code."):EMIService.SearchMPFSByCPT($scope.SearchValue,defaultRequestHeaders).then(function(response){EMIService.serviceSearchedMPFSResults=response,$scope.SearchCodeGrid.data=EMIService.serviceSearchedMPFSResults.data})},$scope.SearchCodeGrid.onRegisterApi=function(gridApi){$scope.gridApi=gridApi,gridApi.selection.on.rowSelectionChanged($scope,function(row){$scope.items=$scope.gridApi.selection.getSelectedRows()}),gridApi.selection.on.rowSelectionChangedBatch($scope,function(rows){rows.length})},$scope.CodeGrid.onRegisterApi=function(codeGridApi){$scope.codeGridApi=codeGridApi,codeGridApi.selection.on.rowSelectionChanged($scope,function(row){$scope.addedItems=$scope.codeGridApi.selection.getSelectedRows()}),codeGridApi.selection.on.rowSelectionChangedBatch($scope,function(rows){rows.length})},$scope.Save=function(){""!==$scope.CaseName&&void 0!==$scope.CaseName||toaster.error("Please enter a case name."),""!==$scope.CaseDescription&&void 0!==$scope.CaseDescription||toaster.error("Please enter a case description."),0!==$scope.CodeGrid.data.length&&null!==$scope.CodeGrid.data||toaster.error("Please select codes to add to your case");var obj={},UserID=localStorage.getItem("UserID");obj.UserID=UserID,obj.CaseName=$scope.CaseName,obj.CaseDescription=$scope.CaseDescription;var data=JSON.stringify(obj);EMIService.SaveCaseToDB(data,defaultRequestHeaders).then(function(response){for(var CaseID=response.data.CaseID,data=[],x=0;x<$scope.CodeGrid.data.length;x++)code={CaseCode1:$scope.CodeGrid.data[x].CPT1__HCPCS},data.push(code);var jsonData=JSON.stringify(data);EMIService.SaveCaseCodesToDB(jsonData,CaseID,defaultRequestHeaders).then(function(response){toaster.success("Case successfully saved"),$state.go("app.case-list")})}).catch(function(error){toaster.error(error)})},$scope.RemoveCode=function(){EMIService.SelectedCodesToRemove=$scope.addedItems;for(var x=0;x<EMIService.SelectedCodesToRemove.length;x++){var Code=EMIService.SelectedCodesToRemove[x],index=$scope.CodeGrid.data.indexOf(Code);$scope.CodeGrid.data.splice(index,1)}},$scope.AddCode=function(){EMIService.SelectedCPTCaseCodes=$scope.items;for(var x=0;x<EMIService.SelectedCPTCaseCodes.length;x++)$scope.CodeGrid.data.push(EMIService.SelectedCPTCaseCodes[x]);$scope.gridApi.selection.clearSelectedRows()},EMIService.RetreiveMPFSTotal(defaultRequestHeaders).then(function(response){$scope.totalItems=response.data,$scope.pageSize=100,$scope.totalPages=$scope.totalItems/$scope.pageSize,$scope.currentPage=1;var obj={};obj.page=$scope.currentPage,obj.pageSize=$scope.pageSize;var data=JSON.stringify(obj);EMIService.RetreivePagedMPFS(data,defaultRequestHeaders).then(function(response){$scope.SearchCodeGrid.data=response.data})}),$scope.onPageChanged=function(){var obj={};obj.page=$scope.currentPage,obj.pageSize=$scope.pageSize;var data=JSON.stringify(obj);EMIService.RetreivePagedMPFS(data,defaultRequestHeaders).then(function(response){$scope.SearchCodeGrid.data=response.data})}}angular.module("EmediCodesApplication").controller("CaseFormCtrl",CaseFormController),CaseFormController.$inject=["$scope","EMIService","authService","$state","toaster"]}();
!function(){function BugReportingController($scope,authService,EMIService,toaster){var defaultRequestHeaders={headers:{"Content-Type":"application/json",Authorization:"Bearer "+localStorage.getItem("id_token")}};authService.ValidateAuthorization(defaultRequestHeaders.headers);var UserId=localStorage.getItem("UserID");$scope.submitTicket=function(){var obj={};obj.bug_description=$scope.BugReportDescription;var data=JSON.stringify(obj);EMIService.SubmitBugReport(UserId,defaultRequestHeaders,data).then(function(response){$scope.BugReportDescription="",toaster.success("Your Ticket Has Been Submitted.")}).catch(function(err){toaster.error(err)})}}angular.module("EmediCodesApplication").controller("BugReportCtrl",BugReportingController),BugReportingController.$inject=["$scope","authService","EMIService","toaster"]}();
!function(){"use strict";function CPTListController($scope,$state,$http,toaster,EMIService,authService){var defaultRequestHeaders={headers:{"Content-Type":"application/json",Authorization:"Bearer "+localStorage.getItem("id_token")}};authService.ValidateAuthorization(defaultRequestHeaders.headers);var UserId=localStorage.getItem("UserID");EMIService.CheckUserSubscription(UserId,defaultRequestHeaders).then(function(response){localStorage.setItem("ValidSubscription",response.ValidSubscription),response.data.ValidSubscription||$state.go("InvalidSubscription")}),$scope.ViewCPT=function(){void 0!=$scope.items?(localStorage.setItem("currentCPTCode",$scope.items[0].CPT1__HCPCS),EMIService.SelectedCPTCode=localStorage.getItem("currentCPTCode"),$state.go("app.cpt")):toaster.error("Error","Please select a CPT code.")},EMIService.RetreiveMPFSTotal(defaultRequestHeaders).then(function(response){$scope.totalItems=response.data,$scope.pageSize=200,$scope.totalPages=$scope.totalItems/$scope.pageSize,$scope.currentPage=1;var obj={};obj.page=$scope.currentPage,obj.pageSize=$scope.pageSize;var data=JSON.stringify(obj);EMIService.RetreivePagedMPFS(data,defaultRequestHeaders).then(function(response){$scope.CPTListOptions.data=response.data})}),$scope.onPageChanged=function(){var obj={};obj.page=$scope.currentPage,obj.pageSize=$scope.pageSize;var data=JSON.stringify(obj);EMIService.RetreivePagedMPFS(data,defaultRequestHeaders).then(function(response){$scope.CPTListOptions.data=response.data})},$scope.searchMPFSByCPT=function(){null===$scope.SearchValue||void 0===$scope.SearchValue?toaster.error("Please input a CPT code or partial CPT code."):EMIService.SearchMPFSByCPT($scope.SearchValue,defaultRequestHeaders).then(function(response){EMIService.serviceSearchedMPFSResults=response,$scope.CPTListOptions.data=EMIService.serviceSearchedMPFSResults.data})},$scope.CPTListOptions={multiSelect:!1,enableFiltering:!0,enableRowSelection:!0,columnDefs:[{field:"CPT1__HCPCS",displayName:"HCPCS/CPT"},{field:"Mod",displayName:"Mod"},{field:"Status",displayName:"Status"},{field:"Description",displayName:"Description"}]},$scope.CPTListOptions.onRegisterApi=function(gridApi){$scope.gridApi=gridApi,gridApi.selection.on.rowSelectionChanged($scope,function(row){$scope.items=$scope.gridApi.selection.getSelectedRows()}),gridApi.selection.on.rowSelectionChangedBatch($scope,function(rows){rows.length})}}angular.module("EmediCodesApplication").controller("CPTListCtrl",CPTListController),CPTListController.$inject=["$scope","$state","$http","toaster","EMIService","authService"]}();
!function(){"use strict";function CPTController($scope,$state,$http,EMIService,authService,toaster){var defaultRequestHeaders={headers:{"Content-Type":"application/json",Authorization:"Bearer "+localStorage.getItem("id_token")}};authService.ValidateAuthorization(defaultRequestHeaders.headers);var UserId=localStorage.getItem("UserID");EMIService.CheckUserSubscription(UserId,defaultRequestHeaders).then(function(response){localStorage.setItem("ValidSubscription",response.ValidSubscription),response.data.ValidSubscription||$state.go("InvalidSubscription")}),$scope.hideWageIndexTable=!0,$scope.hideOppsData=!1,$scope.hideWageIndexCalculations=!0,$scope.WageIndexBtnText="Calculate Wage Index Adjusted Payment";var selectedCPTCode;selectedCPTCode=null===EMIService.SelectedCPTCode||void 0===EMIService.SelectedCPTCode?localStorage.getItem("currentCPTCode"):EMIService.SelectedCPTCode;var Locality="";$scope.PaymentScope="National",EMIService.GetWageIndex(defaultRequestHeaders).then(function(response){EMIService.serviceWageIndex=response,$scope.WageIndexGridOptions.data=EMIService.serviceWageIndex.data}),$scope.ShowWageIndexTable=function(){$scope.hideWageIndexTable=!1,$scope.hideOppsData=!0,$scope.WageIndexBtnText="Perform Adjusted Payment Calculation",$scope.hideWageIndexCalculations=!0,$scope.WageIndexGridApi.core.refresh()},$scope.PerformWageIndexCalculation=function(){if(void 0!=$scope.items&&0!=$scope.items.length){var WageIndexItems=$scope.items[0],obj={};obj.geo_location=WageIndexItems.Area_Name,obj.wage_index=WageIndexItems.Wage_Index,obj.national_payment_rate=$scope.CurrentOPPS.Payment_Rate_.toString(),obj.state_code=WageIndexItems.State_Code,obj.state=WageIndexItems.State;var data=JSON.stringify(obj);EMIService.PerformWageIndexCalculation(data,defaultRequestHeaders).then(function(response){$scope.preliminaryAdjustmentAmount=response.data.preliminary_adjustment_amount,$scope.wageIndexAdjustedAmount=response.data.wage_index_adjusted_payment,$scope.hideWageIndexCalculations=!1,$scope.hideWageIndexTable=!0,$scope.hideOppsData=!1})}else toaster.error("Error","Please select a wage index area.")},$scope.onGPCILocaleChange=function(){Locality=$scope.GPCILocality,$scope.PaymentScope=Locality;var CurrentCPT=JSON.parse(localStorage.getItem("currentCPTCode"));if("NATIONAL"===Locality)var oRegionalPaymentRateRequest={CPTCode:selectedCPTCode,Locale:Locality,PaymentRateScope:"National"};else oRegionalPaymentRateRequest={CPTCode:selectedCPTCode,Locale:Locality,PaymentRateScope:"Regional"};var regionalPaymentRateData=JSON.stringify(oRegionalPaymentRateRequest);1===CurrentCPT.length?"0"!==CurrentCPT[0].Work_RVUs?(EMIService.GetGlobalPaymentRate(regionalPaymentRateData,defaultRequestHeaders).success(function(response){EMIService.serviceGlobalPaymentRate=response.PaymentRate,$scope.GlobalPaymentRate=EMIService.serviceGlobalPaymentRate}).error(function(status,config,error){switch(status){case 401:toaster.pop("error","Authentication session may be expired, redirecting to login."),$timeout(3e3),$window.location=LoginRedirectLocation;break;case 500:toaster.pop("error","Internal Server Error")}}),EMIService.GetProfessionalPaymentRate(regionalPaymentRateData,defaultRequestHeaders).success(function(response){EMIService.serviceProfessionalPaymentRate=response.PaymentRate,$scope.ProfessionalPaymentRate=EMIService.serviceProfessionalPaymentRate}).error(function(status,config,error){switch(status){case 401:toaster.pop("error","Authentication session may be expired, redirecting to login."),$timeout(3e3),$window.location=LoginRedirectLocation;break;case 500:toaster.pop("error","Internal Server Error")}})):(EMIService.GetGlobalPaymentRate(regionalPaymentRateData,defaultRequestHeaders).success(function(response){EMIService.serviceGlobalPaymentRate=response.PaymentRate,$scope.GlobalPaymentRate=EMIService.serviceGlobalPaymentRate}).error(function(status,config,error){switch(status){case 401:toaster.pop("error","Authentication session may be expired, redirecting to login."),$timeout(3e3),$window.location=LoginRedirectLocation;break;case 500:toaster.pop("error","Internal Server Error")}}),EMIService.GetTechnicalPaymentRate(regionalPaymentRateData,defaultRequestHeaders).success(function(response){EMIService.serviceTrchnicalPaymentRate=response.PaymentRate,$scope.TechnicalPaymentRate=EMIService.serviceTrchnicalPaymentRate}).catch(function(error){switch(status){case 401:toaster.pop("error","Authentication session may be expired, redirecting to login."),$timeout(3e3),$window.location=LoginRedirectLocation;break;case 500:toaster.pop("error","Internal Server Error")}})):(EMIService.GetGlobalPaymentRate(regionalPaymentRateData,defaultRequestHeaders).success(function(response){EMIService.serviceGlobalPaymentRate=response.PaymentRate,$scope.GlobalPaymentRate=EMIService.serviceGlobalPaymentRate}).error(function(status,config,error){switch(status){case 401:toaster.pop("error","Authentication session may be expired, redirecting to login."),$timeout(3e3),$window.location=LoginRedirectLocation;break;case 500:toaster.pop("error","Internal Server Error")}}),EMIService.GetTechnicalPaymentRate(regionalPaymentRateData,defaultRequestHeaders).success(function(response){EMIService.serviceTrchnicalPaymentRate=response.PaymentRate,$scope.TechnicalPaymentRate=EMIService.serviceTrchnicalPaymentRate}).catch(function(error){switch(status){case 401:toaster.pop("error","Authentication session may be expired, redirecting to login."),$timeout(3e3),$window.location=LoginRedirectLocation;break;case 500:toaster.pop("error","Internal Server Error")}}),EMIService.GetProfessionalPaymentRate(regionalPaymentRateData,defaultRequestHeaders).success(function(response){EMIService.serviceProfessionalPaymentRate=response.PaymentRate,$scope.ProfessionalPaymentRate=EMIService.serviceProfessionalPaymentRate}).error(function(status,config,error){switch(status){case 401:toaster.pop("error","Authentication session may be expired, redirecting to login."),$timeout(3e3),$window.location=LoginRedirectLocation;break;case 500:toaster.pop("error","Internal Server Error")}}))},EMIService.GetMPFSByCPT(selectedCPTCode,defaultRequestHeaders).success(function(response){if(1===response.length){localStorage.setItem("currentCPTCode",JSON.stringify(response)),$scope.CurrentCPT=response[0];var oNationalPaymentRateRequest={CPTCode:selectedCPTCode,Locale:Locality,PaymentRateScope:"National"},nationalPaymentRateData=JSON.stringify(oNationalPaymentRateRequest);"0"!==$scope.CurrentCPT.Work_RVUs&&"NA"!==$scope.CurrentCPT.Work_RVUs?($scope.TechnicalRVU="NA",$scope.TechnicalPaymentRate=0,EMIService.GetGlobalRVU(selectedCPTCode,defaultRequestHeaders).success(function(response){EMIService.serviceGlobalRVU=response.GlobalRVU,$scope.GlobalRVU=EMIService.serviceGlobalRVU}).catch(function(error){alert(error)}),EMIService.GetProfessionalRVU(selectedCPTCode,defaultRequestHeaders).success(function(response){EMIService.serviceProfessionalRVU=response.ProfessionalRVU,$scope.ProfessionalRVU=response.ProfessionalRVU}).catch(function(error){alert(error)}),EMIService.GetGlobalPaymentRate(nationalPaymentRateData,defaultRequestHeaders).success(function(response){EMIService.serviceGlobalPaymentRate=response.PaymentRate,$scope.GlobalPaymentRate=EMIService.serviceGlobalPaymentRate}).error(function(status,config,error){switch(status){case 401:toaster.pop("error","Authentication session may be expired, redirecting to login."),$timeout(3e3),$window.location=LoginRedirectLocation;break;case 500:toaster.pop("error","Internal Server Error")}}),EMIService.GetProfessionalPaymentRate(nationalPaymentRateData,defaultRequestHeaders).success(function(response){EMIService.serviceProfessionalPaymentRate=response.PaymentRate,$scope.ProfessionalPaymentRate=EMIService.serviceProfessionalPaymentRate}).error(function(status,config,error){switch(status){case 401:toaster.pop("error","Authentication session may be expired, redirecting to login."),$timeout(3e3),$window.location=LoginRedirectLocation;break;case 500:toaster.pop("error","Internal Server Error")}})):($scope.ProfessionalPaymentRate=0,$scope.ProfessionalRVU="NA",EMIService.GetGlobalRVU(selectedCPTCode,defaultRequestHeaders).success(function(response){EMIService.serviceGlobalRVU=response.GlobalRVU,$scope.GlobalRVU=EMIService.serviceGlobalRVU}).catch(function(error){alert(error)}),EMIService.GetTechnicalRVU(selectedCPTCode,defaultRequestHeaders).success(function(response){EMIService.serviceTechnicalRVU=response.TechnicalRVU,$scope.TechnicalRVU=EMIService.serviceTechnicalRVU}).catch(function(error){alert(error)}),EMIService.GetTechnicalPaymentRate(nationalPaymentRateData,defaultRequestHeaders).success(function(response){EMIService.serviceTrchnicalPaymentRate=response.PaymentRate,$scope.TechnicalPaymentRate=EMIService.serviceTrchnicalPaymentRate}).catch(function(error){switch(status){case 401:toaster.pop("error","Authentication session may be expired, redirecting to login."),$timeout(3e3),$window.location=LoginRedirectLocation;break;case 500:toaster.pop("error","Internal Server Error")}}),EMIService.GetGlobalPaymentRate(nationalPaymentRateData,defaultRequestHeaders).success(function(response){EMIService.serviceGlobalPaymentRate=response.PaymentRate,$scope.GlobalPaymentRate=EMIService.serviceGlobalPaymentRate}).error(function(status,config,error){switch(status){case 401:toaster.pop("error","Authentication session may be expired, redirecting to login."),$timeout(3e3),$window.location=LoginRedirectLocation;break;case 500:toaster.pop("error","Internal Server Error")}}))}else oNationalPaymentRateRequest={CPTCode:selectedCPTCode,Locale:Locality,PaymentRateScope:"National"},localStorage.setItem("currentCPTCode",JSON.stringify(response)),nationalPaymentRateData=JSON.stringify(oNationalPaymentRateRequest),$scope.CurrentCPT=response[0],EMIService.GetGlobalRVU(selectedCPTCode,defaultRequestHeaders).success(function(response){EMIService.serviceGlobalRVU=response.GlobalRVU,$scope.GlobalRVU=EMIService.serviceGlobalRVU}).catch(function(error){alert(error)}),EMIService.GetProfessionalRVU(selectedCPTCode,defaultRequestHeaders).success(function(response){$scope.ProfessionalRVU=response.ProfessionalRVU}).catch(function(error){alert(error)}),EMIService.GetTechnicalRVU(selectedCPTCode,defaultRequestHeaders).success(function(response){EMIService.serviceTechnicalRVU=response.TechnicalRVU,$scope.TechnicalRVU=EMIService.serviceTechnicalRVU}).catch(function(error){alert(error)}),EMIService.GetTechnicalPaymentRate(nationalPaymentRateData,defaultRequestHeaders).success(function(response){EMIService.serviceTrchnicalPaymentRate=response.PaymentRate,$scope.TechnicalPaymentRate=EMIService.serviceTrchnicalPaymentRate}).catch(function(error){switch(status){case 401:toaster.pop("error","Authentication session may be expired, redirecting to login."),$timeout(3e3),$window.location=LoginRedirectLocation;break;case 500:toaster.pop("error","Internal Server Error")}}),EMIService.GetGlobalPaymentRate(nationalPaymentRateData,defaultRequestHeaders).success(function(response){EMIService.serviceGlobalPaymentRate=response.PaymentRate,$scope.GlobalPaymentRate=EMIService.serviceGlobalPaymentRate}).error(function(status,config,error){switch(status){case 401:toaster.pop("error","Authentication session may be expired, redirecting to login."),$timeout(3e3),$window.location=LoginRedirectLocation;case 500:toaster.pop("error","Internal Server Error")}}),EMIService.GetProfessionalPaymentRate(nationalPaymentRateData,defaultRequestHeaders).success(function(response){EMIService.serviceProfessionalPaymentRate=response.PaymentRate,$scope.ProfessionalPaymentRate=EMIService.serviceProfessionalPaymentRate}).error(function(status,config,error){switch(status){case 401:toaster.pop("error","Authentication session may be expired, redirecting to login."),$timeout(3e3),$window.location=LoginRedirectLocation;break;case 500:toaster.pop("error","Internal Server Error")}})}).catch(function(error){alert(error)}),EMIService.GetGPCI(defaultRequestHeaders).success(function(response){EMIService.serviceGPCI=response,$scope.GPCILocale=EMIService.serviceGPCI,Locality=EMIService.serviceGPCI.LocalName}).catch(function(error){alert(error)}),EMIService.GetOPPSByCPT(selectedCPTCode,defaultRequestHeaders).success(function(response){EMIService.serviceOPPS=response,$scope.CurrentOPPS=EMIService.serviceOPPS,""===$scope.CurrentOPPS.CH&&($scope.CurrentOPPS.CH="N/A")}).catch(function(error){alert(error)}),EMIService.GetCCIByCPT(selectedCPTCode,defaultRequestHeaders).success(function(response){EMIService.serviceCCI=response,$scope.CCIEditOptions.data=EMIService.serviceCCI}),EMIService.GetMUEByCPT(selectedCPTCode,defaultRequestHeaders).success(function(response){EMIService.serviceMUE=response,$scope.MUEOptions.data=EMIService.serviceMUE}),$scope.CCIEditOptions={multiSelect:!1,columnDefs:[{field:"Column_1",displayName:"Column One",width:125},{field:"Column_2",displayName:"Column Two",width:125},{field:"Deletion",displayName:"Deletion",width:125},{field:"Modifier",displayName:"Modifier",width:125},{field:"PTP_Edit_Rationale",displayName:"PTP Rationale",width:125}]},$scope.MUEOptions={multiSelect:!1,columnDefs:[{field:"HCPCS_CPT_Code",displayName:" CPT Code",width:125},{field:"Outpatient_Hospital_Services_MUE_Values",displayName:"OutPatient MUE",width:125},{field:"MUE_Adjudication_Indicator",displayName:"Adjudication Indicator",width:125},{field:"MUE_Rationale",displayName:"Rationale",width:125}]},$scope.WageIndexGridOptions={multiSelect:!1,enableFiltering:!0,enableRowSelection:!0,columnDefs:[{field:"Area_Name",displayName:"Area Name",width:225},{field:"State",displayName:"State",width:225},{field:"State_Code",displayName:"State Code",width:225},{field:"Wage_Index",displayName:"Wage Index",width:225}]},$scope.WageIndexGridOptions.onRegisterApi=function(gridApi){$scope.WageIndexGridApi=gridApi,gridApi.selection.on.rowSelectionChanged($scope,function(row){$scope.items=$scope.WageIndexGridApi.selection.getSelectedRows()}),gridApi.selection.on.rowSelectionChangedBatch($scope,function(rows){rows.length})}}angular.module("EmediCodesApplication").controller("CPTCtrl",CPTController),CPTController.$inject=["$scope","$state","$http","EMIService","authService","toaster"]}();
!function(){"use strict";function DiseaseSiteController($scope,$http,$state,EMIService,authService,toaster){var defaultRequestHeaders={headers:{"Content-Type":"application/json",Authorization:"Bearer "+localStorage.getItem("id_token")}};authService.ValidateAuthorization(defaultRequestHeaders.headers);localStorage.getItem("UserID");EMIService.GetDiseaseSites(defaultRequestHeaders).then(function(response){EMIService.serviceDiseaseSites=response.data,$scope.DiseaseSites=EMIService.serviceDiseaseSites}).catch(function(error){}),$scope.chooseDiseaseSite=function(){EMIService.serviceChosenDiseaseSite=$scope.DiseaseSite,$state.go("app.modality")}}angular.module("EmediCodesApplication").controller("DiseaseSiteCtrl",DiseaseSiteController),DiseaseSiteController.$inject=["$scope","$http","$state","EMIService","authService","toaster"]}();
!function(){"use strict";function LoginController($scope,$state,LoginService){$scope.goToRegistration=function(){$state.go("register")},$scope.AuthenticateUser=function(){LoginService.login()}}angular.module("EmediCodesApplication").controller("LoginCtrl",LoginController),LoginController.$inject=["$scope","$state","LoginService"]}();
!function(){"use strict";function LocaleController($scope,$state,EMIService,toaster,authService){var defaultRequestHeaders={headers:{"Content-Type":"application/json",Authorization:"Bearer "+localStorage.getItem("id_token")}};authService.ValidateAuthorization(defaultRequestHeaders.headers),$scope.chooseSetting=function(){EMIService.serviceChosenTreatmentSetting=$scope.TreatmentSetting,$state.go("app.treatment-summary")}}angular.module("EmediCodesApplication").controller("LocaleCtrl",LocaleController),LocaleController.$inject=["$scope","$state","EMIService","toaster","authService"]}();
!function(){function ICD10Controller($scope,$state,EMIService,authService,toaster){var defaultRequestHeaders={headers:{"Content-Type":"application/json",Authorization:"Bearer "+localStorage.getItem("id_token")}};authService.ValidateAuthorization(defaultRequestHeaders.headers);var UserId=localStorage.getItem("UserID");EMIService.CheckUserSubscription(UserId,defaultRequestHeaders).then(function(response){localStorage.setItem("ValidSubscription",response.ValidSubscription),response.data.ValidSubscription||$state.go("InvalidSubscription")}),$scope.ICD10ListOptions={enableFiltering:!0,enableRowSelection:!0,columnDefs:[{field:"Name",displayName:"Name"},{field:"CODE",displayName:"Code"},{field:"ACTIVE",displayName:"Is Active"}]},EMIService.GetICD10Count(defaultRequestHeaders).then(function(response){$scope.totalItems=response.data,$scope.pageSize=100,$scope.totalPages=$scope.totalItems/$scope.pageSize,$scope.currentPage=1;var obj={};obj.page=$scope.currentPage,obj.pageSize=$scope.pageSize;var data=JSON.stringify(obj);EMIService.GetICD10Paged(data,defaultRequestHeaders).then(function(response){EMIService.serviceICD10PagedData=response,$scope.ICD10ListOptions.data=EMIService.serviceICD10PagedData.data})}),$scope.onPageChanged=function(){var obj={};obj.page=$scope.currentPage,obj.pageSize=$scope.pageSize;var data=JSON.stringify(obj);EMIService.GetICD10Paged(data,defaultRequestHeaders).then(function(response){EMIService.serviceICD10PagedData=response,$scope.ICD10ListOptions.data=EMIService.serviceICD10PagedData.data})},$scope.searchByICD10Code=function(){EMIService.SearchICD10($scope.SearchValue,defaultRequestHeaders).then(function(response){EMIService.servceSearchedICD10=response,$scope.ICD10ListOptions.data=EMIService.servceSearchedICD10.data})}}angular.module("EmediCodesApplication").controller("ICD10Ctrl",ICD10Controller),ICD10Controller.$inject=["$scope","$state","EMIService","authService","toaster"]}();
!function(){function PaymentController($scope,toaster,RegistrationService,$state){function createToken(){stripe.createToken($scope.card).then(function(result){result.error?($scope.cardError=result.error.message,$scope.submitting=!1):function(token){var obj={};obj.UserId=RegistrationService.UserId,obj.Auth0Id=RegistrationService.Auth0Identifier,obj.Token=token.id,obj.coupon_code=$scope.CouponCode;var data=JSON.stringify(obj);RegistrationService.HandleStripeToken(data).then(function(response){toaster.success("Registration Success","You have been successfully registered you may now login."),$state.transitionTo("login")})}(result.token)})}var stripe=Stripe("pk_live_uJ6WdiMXisI13NekLrNDPHiv"),elements=stripe.elements();$scope.card=elements.create("card",{style:{base:{color:"#32325d",lineHeight:"24px",fontFamily:"Helvetica Neue",fontSmoothing:"antialiased",fontSize:"16px","::placeholder":{color:"#aab7c4"}},invalid:{color:"#fa755a",iconColor:"#fa755a"}}}),$scope.card.mount("#card-element"),$scope.card.addEventListener("change",function(event){event.error?$scope.cardError=event.error.message:$scope.cardError=""}),$scope.submit=function(){$scope.cardError="",$scope.submitting=!0,createToken()}}angular.module("EmediCodesApplication").controller("PaymentCtrl",PaymentController),PaymentController.$inject=["$scope","toaster","RegistrationService","$state"]}();
!function(){"use strict";function ModalityController($scope,$state,authService,EMIService,toaster){var defaultRequestHeaders={headers:{"Content-Type":"application/json",Authorization:"Bearer "+localStorage.getItem("id_token")}};authService.ValidateAuthorization(defaultRequestHeaders.headers);var chosenDiseaseSite=EMIService.serviceChosenDiseaseSite;EMIService.GetApplicableModalities(chosenDiseaseSite,defaultRequestHeaders).then(function(response){EMIService.serviceApplicableModalities=response,$scope.ApplicableModalities=EMIService.serviceApplicableModalities.data}),$scope.chooseModality=function(){EMIService.serviceChosenModalityID=$scope.Modality,$state.go("app.locale")}}angular.module("EmediCodesApplication").controller("ModalityCtrl",ModalityController),ModalityController.$inject=["$scope","$state","authService","EMIService","toaster"]}();
!function(){function UserProfileController($scope,$state,EMIService,authService,toaster){var defaultRequestHeaders={headers:{"Content-Type":"application/json",Authorization:"Bearer "+localStorage.getItem("id_token")}};authService.ValidateAuthorization(defaultRequestHeaders.headers);var UserId=localStorage.getItem("UserID");EMIService.CheckUserSubscription(UserId,defaultRequestHeaders).then(function(response){$scope.isValidSubscription=response.data.ValidSubscription}),$scope.createSubscription=function(){EMIService.CheckUserPaymentMethod(UserId,defaultRequestHeaders).then(function(response){response.data.PaymentMethodExists?EMIService.CreateNewSubscription(UserId,defaultRequestHeaders).then(function(response){toaster.success("You have successfully subscribed to e-MediCodes"),$state.go("app.case-list")}).catch(function(error){toast.error(error)}):$state.go("payment")}).catch(function(error){toaster.error(error)})},$scope.cancelSubscription=function(){EMIService.CancelUserSubscription(UserId,defaultRequestHeaders).then(function(response){toaster.success("Your subscription has been cancelled.")}).catch(function(error){toaster.error(error)})}}angular.module("EmediCodesApplication").controller("UserProfileCtrl",UserProfileController),UserProfileController.$inject=["$scope","$state","EMIService","authService","toaster"]}();
!function(){function RegistrationController($scope,$state,toaster,$http,RegistrationService){$scope.States=RegistrationService.States,$scope.Countries=RegistrationService.Countries,$scope.Register=function(){var obj={};obj.first_name=$scope.RegisterForm.FirstName.$viewValue,obj.last_name=$scope.RegisterForm.LastName.$viewValue,obj.email_address=$scope.RegisterForm.CompanyEmail.$viewValue,obj.city=$scope.RegisterForm.City.$viewValue,obj.state=$scope.RegisterForm.State.$viewValue,obj.country=$scope.RegisterForm.Country.$viewValue,obj.street_address=$scope.RegisterForm.StreetAddress.$viewValue,obj.phone_number=$scope.RegisterForm.PhoneNumber.$viewValue,obj.password=$scope.RegisterForm.Password.$viewValue,obj.password_confirm=$scope.RegisterForm.PasswordConfirm.$viewValue;var data=JSON.stringify(obj);RegistrationService.RegisterUsers(data).success(function(response){RegistrationService.UserId=response.Id,RegistrationService.Auth0Identifier=response.Auth0Identifier,$state.go("payment")}).error(function(response){toaster.error("Error",response.Message)})}}angular.module("EmediCodesApplication").controller("RegistrationCtrl",RegistrationController),RegistrationController.$inject=["$scope","$state","toaster","$http","RegistrationService"]}();
!function(){"use strict";function authService($state,angularAuth0,EMIService,$timeout,$rootScope,$http,toaster){function ValidateAuthorization(Headers){$http({method:"GET",url:BaseUrl+"api/Validator",headers:Headers}).then(function(response){EMIService.isAuthorized=!0}).catch(function(status,headers,config,error){EMIService.isAuthorized=!1,handleUnauthorized()})}function handleUnauthorized(){toaster.error("Your session has expired, you will be redirected to the login."),$timeout(3e3),$state.go("login")}var BaseUrl=EMIService.BaseUrl;return{handleAuthentication:function(){angularAuth0.parseHash(function(err,authResult){authResult&&authResult.accessToken&&authResult.idToken?(setSession(authResult),_AuthToken=localStorage.getItem("id_token"),$rootScope.$broadcast("AuthTokenSuccess")):err&&($timeout(function(){}),console.log(err),alert("Error: "+err.error+". Check the console for further details."))})},logout:function(){localStorage.removeItem("access_token"),localStorage.removeItem("id_token"),localStorage.removeItem("expires_at"),localStorage.removeItem("currentCPTCode"),localStorage.removeItem("UserID"),$state.go("login")},isAuthenticated:function(){ValidateAuthorization({Authorization:"Bearer "+localStorage.getItem("id_token")});var expiresAt=JSON.parse(localStorage.getItem("expires_at"));return(new Date).getTime()<expiresAt},ValidateAuthorization:ValidateAuthorization,getProfile:function(cb){var accessToken=localStorage.getItem("access_token");if(!accessToken)throw new Error("Access token must exist to fetch profile");angularAuth0.client.userInfo(accessToken,function(err,profile){if(profile)return EMIService.Auth0ID=profile.sub,$rootScope.$broadcast("Auth0IDSet"),profile.sub})},handleUnauthorized:handleUnauthorized}}angular.module("EmediCodesApplication").factory("authService",authService),authService.$inject=["$state","angularAuth0","EMIService","$timeout","$rootScope","$http","toaster"]}();
!function(){function CallBackService(angularAuth0,$state){return{handleAuthentication:function(){angularAuth0.parseHash(function(err,authResult){authResult&&authResult.accessToken&&authResult.idToken?(function(authResult){var expiresAt=JSON.stringify(authResult.expiresIn+(new Date).getTime());localStorage.setItem("access_token",authResult.accessToken),localStorage.setItem("id_token",authResult.idToken),localStorage.setItem("expires_at",expiresAt)}(authResult),$state.go("app.case-list")):err&&(console.log(err),alert("Error: "+err.error+". Check the console for further details."))})}}}angular.module("EmediCodesApplication").factory("callBackService",CallBackService),CallBackService.$inject=["angularAuth0","$state"]}();
!function(){"use strict";function EMIService($http,toaster,$window,$timeout,$rootScope){var BaseUrl="https://www.app.emedicodes.com/";_RetrieveAllMPFS={},_RetreivePagedMPFS={},_RetreiveMPFSTotal={};_GetGlobalPaymentRate={};_GetWageIndexAreas={};_GetProfessionalPaymentRate={};_GetTechnicalPaymentRate={};_GetMPFSByCPT={};_GetGlobalRVU={};_GetTechnicalRVU={};_GetProfessionalRVU={};_GetGPCI={};_GetOPPSByCPT={};_GetCCIByCPT={};_GetMUEByCPT={};_PerformWageIndexCalculation={};_SearchMPFSByCPT={};_GetDiseaseSites={};_GetApplicableModalities={};_GetTreatmentCodesByModality={};_GetUserProfile={};_GetICD10Data={},_GetICD10Count={},_GetICD10Paged={};_SearchICD10={};_SaveCaseToDB={},_SaveCaseCodesToDB={};_GetUserCaseList={};_GetCaseCodeSummary={};_CancelUserSubscription={},_CheckUserSubscription={},_CheckUserPaymentMethod={},_CreateNewSubscription={},_AddUserPaymentMethod={},_GetWageIndex={};_CheckFreeTrialPeriod={},_GetFreeTrialPeriodAmount={},_DeleteCase={};_SubmitBugReport={};var _SubmitBugReport=function(UserId,config,data){return $http.post(BaseUrl+"api/BugReport/"+UserId,data,config)},_GetFreeTrialPeriodAmount=function(UserId,config){return $http.get(BaseUrl+"api/Payments/"+UserId+"/FreeTrialTime",config)},_CheckFreeTrialPeriod=function(UserId,config){return $http.get(BaseUrl+"api/Payments/"+UserId+"/FreeTrialPeriod",config)},_DeleteCase=function(CaseId,config){return $http.get(BaseUrl+"api/Case/"+CaseId,config)},_GetWageIndex=function(config){return $http.get(BaseUrl+"api/WageIndex",config)},_AddUserPaymentMethod=function(data,config){return $http.post(BaseUrl+"api/Payments/PaymentMethod",data,config)},_CreateNewSubscription=function(UserId,config){return $http.get(BaseUrl+"api/Payments/"+UserId+"/Subscribe")},_CheckUserPaymentMethod=function(UserId,config){return $http.get(BaseUrl+"api/Payments/"+UserId+"/PaymentMethod",config)},_CheckUserSubscription=function(UserId,config){return $http.get(BaseUrl+"api/Payments/"+UserId+"/CheckSubscription",config)},_CancelUserSubscription=function(UserId,config){return $http.get(BaseUrl+"api/Payments/"+UserId+"/CancelSubscription",config)},_GetCaseCodeSummary=function(CaseID,data,config){return $http.post(BaseUrl+"api/Case/"+CaseID+"/CaseSummary",data,config)},_GetUserCaseList=function(UserID,config){return $http.get(BaseUrl+"api/Case/"+UserID+"/CaseList",config)},_SaveCaseCodesToDB=function(data,CaseID,config){return $http.post(BaseUrl+"api/Case/CaseCodes/"+CaseID,data,config)},_SaveCaseToDB=function(data,config){return $http.post(BaseUrl+"api/Case",data,config)},_SearchICD10=function(data,config){return $http.get(BaseUrl+"api/Diseases/"+data+"/Search",config)},_GetICD10Paged=function(data,config){return $http.post(BaseUrl+"api/Diseases/PageRecords",data,config)},_GetICD10Count=function(config){return $http.get(BaseUrl+"api/Diseases/Count",config)},_GetICD10Data=function(config){return $http.get(BaseUrl+"api/Diseases",config)},_GetUserProfile=function(Auth0ID,config){return $http.get(BaseUrl+"api/Users/"+Auth0ID+"/ProfileInfo",config)},_GetTreatmentCodesByModality=function(ModalityID,apiResource,config){return $http.get(BaseUrl+"api/TreatmentCodeCalculator/"+ModalityID+"/"+apiResource,config)},_GetApplicableModalities=function(chosenDiseaseSite,config){return $http.get(BaseUrl+"api/Modalities/"+chosenDiseaseSite+"/DiseaseSiteApplicableModalities",config)},_GetDiseaseSites=function(config){return $http.get(BaseUrl+"api/DiseaseSites",config)},_SearchMPFSByCPT=function(CptCodePartial,config){return $http.get(BaseUrl+"api/MPFS/"+CptCodePartial+"/Search",config)},_RetreiveMPFSTotal=function(config){return $http.get(BaseUrl+"api/MPFS/Count",config)},_RetreivePagedMPFS=function(data,config){return $http.post(BaseUrl+"api/MPFS/PageRecords",data,config)},_PerformWageIndexCalculation=function(data,config){return $http.post(BaseUrl+"api/WageIndex/Calculate",data,config)},_GetWageIndexAreas=function(){return $http.get(BaseUrl+"api/WageIndex")},_GetMUEByCPT=function(SelectedCPT,config){return $http.get(BaseUrl+"api/MUEInformation/"+SelectedCPT+"/CPT",config)},_GetCCIByCPT=function(SelectedCPT,config){return $http.get(BaseUrl+"api/CCIEdits/"+SelectedCPT+"/CPT",config)},_GetOPPSByCPT=function(SelectedCPT,config){return $http.get(BaseUrl+"api/OPPS/"+SelectedCPT+"/CPT",config)},_GetGPCI=function(config){return $http.get(BaseUrl+"api/GPCI",config)},_GetGlobalRVU=function(SelectedCPTCode,Config){return $http.get(BaseUrl+"api/MPFS/"+SelectedCPTCode+"/GlobalRVUCalculation/",Config)},_GetProfessionalRVU=function(SelectedCPTCode,Config){return $http.get(BaseUrl+"api/MPFS/"+SelectedCPTCode+"/ProfessionalRVUCalculation",Config)},_GetTechnicalRVU=function(SelectedCPTCode,Config){return $http.get(BaseUrl+"api/MPFS/"+SelectedCPTCode+"/TechnicalRVUCalculation",Config)},_GetGlobalPaymentRate=function(data,config){return $http.post(BaseUrl+"api/MPFS/GlobalPaymentRate",data,config)},_GetProfessionalPaymentRate=function(data,config){return $http.post(BaseUrl+"api/MPFS/ProfessionalPaymentRate",data,config)},_GetTechnicalPaymentRate=function(data,config){return $http.post(BaseUrl+"api/MPFS/TechnicalPaymentRate",data,config)},_GetMPFSByCPT=function(SelectedCPTCode,Config){return $http.get(BaseUrl+"api/MPFS/"+SelectedCPTCode+"/CPT",Config)},_RetrieveAllMPFS=function(Config){return $http.get(BaseUrl+"api/MPFS",Config)};return{serviceMPFS:{},RetrieveAllMPFS:_RetrieveAllMPFS,serviceGlobalPaymentRate:0,GetGlobalPaymentRate:_GetGlobalPaymentRate,serviceProfessionalPayment:0,GetProfessionalPaymentRate:_GetProfessionalPaymentRate,serviceTechnicalPaymentRate:0,GetTechnicalPaymentRate:_GetTechnicalPaymentRate,serviceMPFSByCPT:{},GetMPFSByCPT:_GetMPFSByCPT,GetGlobalRVU:_GetGlobalRVU,serviceGlobalRVU:"",GetProfessionalRVU:_GetProfessionalRVU,serviceProfessionalRVU:"",GetTechnicalRVU:_GetTechnicalRVU,serviceTechnicalRVU:"",serviceGPCI:{},GetGPCI:_GetGPCI,serviceOPPS:{},GetOPPSByCPT:_GetOPPSByCPT,serviceCCI:{},GetCCIByCPT:_GetCCIByCPT,serviceMUE:{},GetMUEByCPT:_GetMUEByCPT,serviceWageIndexAreas:{},GetWageIndexAreas:_GetWageIndexAreas,serviceSelectedWageArea:{},PerformWageIndexCalculation:_PerformWageIndexCalculation,RetreivePagedMPFS:_RetreivePagedMPFS,serviceMPFSTotal:0,RetreiveMPFSTotal:_RetreiveMPFSTotal,serviceSearchedMPFSResults:{},SearchMPFSByCPT:_SearchMPFSByCPT,serviceDiseaseSites:{},GetDiseaseSites:_GetDiseaseSites,serviceChosenDiseaseSite:"",serviceApplicableModalities:{},GetApplicableModalities:_GetApplicableModalities,serviceChosenModalityID:0,serviceTreatmentCodes:{},serviceChosenTreatmentSetting:"",GetTreatmentCodesByModality:_GetTreatmentCodesByModality,calculatorPrevBtnDisabled:!0,calculatorNextBtnDisabled:!0,calculatorCalcBtnDisabled:!1,isAuthorized:!1,RegisterUser:function(data){return $http.post(BaseUrl+"api/Users",data)},Auth0ID:"",serviceUserProfile:{},GetUserProfile:_GetUserProfile,serviceICD10Data:{},GetICD10Data:_GetICD10Data,GetICD10Count:_GetICD10Count,GetICD10Paged:_GetICD10Paged,serviceICD10PagedData:{},serviceSearchedICD10:{},SearchICD10:_SearchICD10,SelectedCPTCaseCodes:[],SelectedCodesToRemove:[],CurrentUserID:0,SaveCaseToDB:_SaveCaseToDB,SaveCaseCodesToDB:_SaveCaseCodesToDB,serviceUserCaseList:{},GetUserCaseList:_GetUserCaseList,UserID:0,SelectedCaseID:0,GetCaseCodeSummary:_GetCaseCodeSummary,serviceCaseCodeSummary:{},CancelUserSubscription:_CancelUserSubscription,CheckUserSubscription:_CheckUserSubscription,CheckUserPaymentMethod:_CheckUserPaymentMethod,CreateNewSubscription:_CreateNewSubscription,AddUserPaymentMethod:_AddUserPaymentMethod,BaseUrl:BaseUrl,GetWageIndex:_GetWageIndex,serviceWageIndex:{},DeleteCase:_DeleteCase,deleteSelectedCaseID:0,CheckFreeTrialPeriod:_CheckFreeTrialPeriod,GetFreeTrialPeriodAmount:_GetFreeTrialPeriodAmount,SubmitBugReport:_SubmitBugReport}}angular.module("EmediCodesApplication").factory("EMIService",EMIService),EMIService.$inject=["$http","toaster","$window","$timeout","$rootScope"]}();
!function(){"use strict";function LoginService(angularAuth0){return{login:function(){angularAuth0.authorize()}}}angular.module("EmediCodesApplication").factory("LoginService",LoginService),LoginService.$inject=["angularAuth0"]}();
!function(){"use strict";function RegistrationServie($http,EMIService){var BaseUrl=EMIService.BaseUrl;_HandleStripeToken={};var _HandleStripeToken=function(data){return $http.post(BaseUrl+"api/Payments/Capture",data)};return{States:[{name:"Alabama",abbreviation:"AL"},{name:"Alaska",abbreviation:"AK"},{name:"American Samoa",abbreviation:"AS"},{name:"Arizona",abbreviation:"AZ"},{name:"Arkansas",abbreviation:"AR"},{name:"California",abbreviation:"CA"},{name:"Colorado",abbreviation:"CO"},{name:"Connecticut",abbreviation:"CT"},{name:"Delaware",abbreviation:"DE"},{name:"District Of Columbia",abbreviation:"DC"},{name:"Federated States Of Micronesia",abbreviation:"FM"},{name:"Florida",abbreviation:"FL"},{name:"Georgia",abbreviation:"GA"},{name:"Guam",abbreviation:"GU"},{name:"Hawaii",abbreviation:"HI"},{name:"Idaho",abbreviation:"ID"},{name:"Illinois",abbreviation:"IL"},{name:"Indiana",abbreviation:"IN"},{name:"Iowa",abbreviation:"IA"},{name:"Kansas",abbreviation:"KS"},{name:"Kentucky",abbreviation:"KY"},{name:"Louisiana",abbreviation:"LA"},{name:"Maine",abbreviation:"ME"},{name:"Marshall Islands",abbreviation:"MH"},{name:"Maryland",abbreviation:"MD"},{name:"Massachusetts",abbreviation:"MA"},{name:"Michigan",abbreviation:"MI"},{name:"Minnesota",abbreviation:"MN"},{name:"Mississippi",abbreviation:"MS"},{name:"Missouri",abbreviation:"MO"},{name:"Montana",abbreviation:"MT"},{name:"Nebraska",abbreviation:"NE"},{name:"Nevada",abbreviation:"NV"},{name:"New Hampshire",abbreviation:"NH"},{name:"New Jersey",abbreviation:"NJ"},{name:"New Mexico",abbreviation:"NM"},{name:"New York",abbreviation:"NY"},{name:"North Carolina",abbreviation:"NC"},{name:"North Dakota",abbreviation:"ND"},{name:"Northern Mariana Islands",abbreviation:"MP"},{name:"Ohio",abbreviation:"OH"},{name:"Oklahoma",abbreviation:"OK"},{name:"Oregon",abbreviation:"OR"},{name:"Palau",abbreviation:"PW"},{name:"Pennsylvania",abbreviation:"PA"},{name:"Puerto Rico",abbreviation:"PR"},{name:"Rhode Island",abbreviation:"RI"},{name:"South Carolina",abbreviation:"SC"},{name:"South Dakota",abbreviation:"SD"},{name:"Tennessee",abbreviation:"TN"},{name:"Texas",abbreviation:"TX"},{name:"Utah",abbreviation:"UT"},{name:"Vermont",abbreviation:"VT"},{name:"Virgin Islands",abbreviation:"VI"},{name:"Virginia",abbreviation:"VA"},{name:"Washington",abbreviation:"WA"},{name:"West Virginia",abbreviation:"WV"},{name:"Wisconsin",abbreviation:"WI"},{name:"Wyoming",abbreviation:"WY"}],Countries:[{name:"Afghanistan",code:"AF"},{name:"Åland Islands",code:"AX"},{name:"Albania",code:"AL"},{name:"Algeria",code:"DZ"},{name:"American Samoa",code:"AS"},{name:"AndorrA",code:"AD"},{name:"Angola",code:"AO"},{name:"Anguilla",code:"AI"},{name:"Antarctica",code:"AQ"},{name:"Antigua and Barbuda",code:"AG"},{name:"Argentina",code:"AR"},{name:"Armenia",code:"AM"},{name:"Aruba",code:"AW"},{name:"Australia",code:"AU"},{name:"Austria",code:"AT"},{name:"Azerbaijan",code:"AZ"},{name:"Bahamas",code:"BS"},{name:"Bahrain",code:"BH"},{name:"Bangladesh",code:"BD"},{name:"Barbados",code:"BB"},{name:"Belarus",code:"BY"},{name:"Belgium",code:"BE"},{name:"Belize",code:"BZ"},{name:"Benin",code:"BJ"},{name:"Bermuda",code:"BM"},{name:"Bhutan",code:"BT"},{name:"Bolivia",code:"BO"},{name:"Bosnia and Herzegovina",code:"BA"},{name:"Botswana",code:"BW"},{name:"Bouvet Island",code:"BV"},{name:"Brazil",code:"BR"},{name:"British Indian Ocean Territory",code:"IO"},{name:"Brunei Darussalam",code:"BN"},{name:"Bulgaria",code:"BG"},{name:"Burkina Faso",code:"BF"},{name:"Burundi",code:"BI"},{name:"Cambodia",code:"KH"},{name:"Cameroon",code:"CM"},{name:"Canada",code:"CA"},{name:"Cape Verde",code:"CV"},{name:"Cayman Islands",code:"KY"},{name:"Central African Republic",code:"CF"},{name:"Chad",code:"TD"},{name:"Chile",code:"CL"},{name:"China",code:"CN"},{name:"Christmas Island",code:"CX"},{name:"Cocos (Keeling) Islands",code:"CC"},{name:"Colombia",code:"CO"},{name:"Comoros",code:"KM"},{name:"Congo",code:"CG"},{name:"Congo, The Democratic Republic of the",code:"CD"},{name:"Cook Islands",code:"CK"},{name:"Costa Rica",code:"CR"},{name:'Cote D"Ivoire',code:"CI"},{name:"Croatia",code:"HR"},{name:"Cuba",code:"CU"},{name:"Cyprus",code:"CY"},{name:"Czech Republic",code:"CZ"},{name:"Denmark",code:"DK"},{name:"Djibouti",code:"DJ"},{name:"Dominica",code:"DM"},{name:"Dominican Republic",code:"DO"},{name:"Ecuador",code:"EC"},{name:"Egypt",code:"EG"},{name:"El Salvador",code:"SV"},{name:"Equatorial Guinea",code:"GQ"},{name:"Eritrea",code:"ER"},{name:"Estonia",code:"EE"},{name:"Ethiopia",code:"ET"},{name:"Falkland Islands (Malvinas)",code:"FK"},{name:"Faroe Islands",code:"FO"},{name:"Fiji",code:"FJ"},{name:"Finland",code:"FI"},{name:"France",code:"FR"},{name:"French Guiana",code:"GF"},{name:"French Polynesia",code:"PF"},{name:"French Southern Territories",code:"TF"},{name:"Gabon",code:"GA"},{name:"Gambia",code:"GM"},{name:"Georgia",code:"GE"},{name:"Germany",code:"DE"},{name:"Ghana",code:"GH"},{name:"Gibraltar",code:"GI"},{name:"Greece",code:"GR"},{name:"Greenland",code:"GL"},{name:"Grenada",code:"GD"},{name:"Guadeloupe",code:"GP"},{name:"Guam",code:"GU"},{name:"Guatemala",code:"GT"},{name:"Guernsey",code:"GG"},{name:"Guinea",code:"GN"},{name:"Guinea-Bissau",code:"GW"},{name:"Guyana",code:"GY"},{name:"Haiti",code:"HT"},{name:"Heard Island and Mcdonald Islands",code:"HM"},{name:"Holy See (Vatican City State)",code:"VA"},{name:"Honduras",code:"HN"},{name:"Hong Kong",code:"HK"},{name:"Hungary",code:"HU"},{name:"Iceland",code:"IS"},{name:"India",code:"IN"},{name:"Indonesia",code:"ID"},{name:"Iran, Islamic Republic Of",code:"IR"},{name:"Iraq",code:"IQ"},{name:"Ireland",code:"IE"},{name:"Isle of Man",code:"IM"},{name:"Israel",code:"IL"},{name:"Italy",code:"IT"},{name:"Jamaica",code:"JM"},{name:"Japan",code:"JP"},{name:"Jersey",code:"JE"},{name:"Jordan",code:"JO"},{name:"Kazakhstan",code:"KZ"},{name:"Kenya",code:"KE"},{name:"Kiribati",code:"KI"},{name:'Korea, Democratic People"S Republic of',code:"KP"},{name:"Korea, Republic of",code:"KR"},{name:"Kuwait",code:"KW"},{name:"Kyrgyzstan",code:"KG"},{name:'Lao People"S Democratic Republic',code:"LA"},{name:"Latvia",code:"LV"},{name:"Lebanon",code:"LB"},{name:"Lesotho",code:"LS"},{name:"Liberia",code:"LR"},{name:"Libyan Arab Jamahiriya",code:"LY"},{name:"Liechtenstein",code:"LI"},{name:"Lithuania",code:"LT"},{name:"Luxembourg",code:"LU"},{name:"Macao",code:"MO"},{name:"Macedonia, The Former Yugoslav Republic of",code:"MK"},{name:"Madagascar",code:"MG"},{name:"Malawi",code:"MW"},{name:"Malaysia",code:"MY"},{name:"Maldives",code:"MV"},{name:"Mali",code:"ML"},{name:"Malta",code:"MT"},{name:"Marshall Islands",code:"MH"},{name:"Martinique",code:"MQ"},{name:"Mauritania",code:"MR"},{name:"Mauritius",code:"MU"},{name:"Mayotte",code:"YT"},{name:"Mexico",code:"MX"},{name:"Micronesia, Federated States of",code:"FM"},{name:"Moldova, Republic of",code:"MD"},{name:"Monaco",code:"MC"},{name:"Mongolia",code:"MN"},{name:"Montserrat",code:"MS"},{name:"Morocco",code:"MA"},{name:"Mozambique",code:"MZ"},{name:"Myanmar",code:"MM"},{name:"Namibia",code:"NA"},{name:"Nauru",code:"NR"},{name:"Nepal",code:"NP"},{name:"Netherlands",code:"NL"},{name:"Netherlands Antilles",code:"AN"},{name:"New Caledonia",code:"NC"},{name:"New Zealand",code:"NZ"},{name:"Nicaragua",code:"NI"},{name:"Niger",code:"NE"},{name:"Nigeria",code:"NG"},{name:"Niue",code:"NU"},{name:"Norfolk Island",code:"NF"},{name:"Northern Mariana Islands",code:"MP"},{name:"Norway",code:"NO"},{name:"Oman",code:"OM"},{name:"Pakistan",code:"PK"},{name:"Palau",code:"PW"},{name:"Palestinian Territory, Occupied",code:"PS"},{name:"Panama",code:"PA"},{name:"Papua New Guinea",code:"PG"},{name:"Paraguay",code:"PY"},{name:"Peru",code:"PE"},{name:"Philippines",code:"PH"},{name:"Pitcairn",code:"PN"},{name:"Poland",code:"PL"},{name:"Portugal",code:"PT"},{name:"Puerto Rico",code:"PR"},{name:"Qatar",code:"QA"},{name:"Reunion",code:"RE"},{name:"Romania",code:"RO"},{name:"Russian Federation",code:"RU"},{name:"RWANDA",code:"RW"},{name:"Saint Helena",code:"SH"},{name:"Saint Kitts and Nevis",code:"KN"},{name:"Saint Lucia",code:"LC"},{name:"Saint Pierre and Miquelon",code:"PM"},{name:"Saint Vincent and the Grenadines",code:"VC"},{name:"Samoa",code:"WS"},{name:"San Marino",code:"SM"},{name:"Sao Tome and Principe",code:"ST"},{name:"Saudi Arabia",code:"SA"},{name:"Senegal",code:"SN"},{name:"Serbia and Montenegro",code:"CS"},{name:"Seychelles",code:"SC"},{name:"Sierra Leone",code:"SL"},{name:"Singapore",code:"SG"},{name:"Slovakia",code:"SK"},{name:"Slovenia",code:"SI"},{name:"Solomon Islands",code:"SB"},{name:"Somalia",code:"SO"},{name:"South Africa",code:"ZA"},{name:"South Georgia and the South Sandwich Islands",code:"GS"},{name:"Spain",code:"ES"},{name:"Sri Lanka",code:"LK"},{name:"Sudan",code:"SD"},{name:"Suriname",code:"SR"},{name:"Svalbard and Jan Mayen",code:"SJ"},{name:"Swaziland",code:"SZ"},{name:"Sweden",code:"SE"},{name:"Switzerland",code:"CH"},{name:"Syrian Arab Republic",code:"SY"},{name:"Taiwan, Province of China",code:"TW"},{name:"Tajikistan",code:"TJ"},{name:"Tanzania, United Republic of",code:"TZ"},{name:"Thailand",code:"TH"},{name:"Timor-Leste",code:"TL"},{name:"Togo",code:"TG"},{name:"Tokelau",code:"TK"},{name:"Tonga",code:"TO"},{name:"Trinidad and Tobago",code:"TT"},{name:"Tunisia",code:"TN"},{name:"Turkey",code:"TR"},{name:"Turkmenistan",code:"TM"},{name:"Turks and Caicos Islands",code:"TC"},{name:"Tuvalu",code:"TV"},{name:"Uganda",code:"UG"},{name:"Ukraine",code:"UA"},{name:"United Arab Emirates",code:"AE"},{name:"United Kingdom",code:"GB"},{name:"United States",code:"US"},{name:"United States Minor Outlying Islands",code:"UM"},{name:"Uruguay",code:"UY"},{name:"Uzbekistan",code:"UZ"},{name:"Vanuatu",code:"VU"},{name:"Venezuela",code:"VE"},{name:"Viet Nam",code:"VN"},{name:"Virgin Islands, British",code:"VG"},{name:"Virgin Islands, U.S.",code:"VI"},{name:"Wallis and Futuna",code:"WF"},{name:"Western Sahara",code:"EH"},{name:"Yemen",code:"YE"},{name:"Zambia",code:"ZM"},{name:"Zimbabwe",code:"ZW"}],UserId:0,HandleStripeToken:_HandleStripeToken,Auth0Identifier:"",RegisterUsers:function(data){return $http.post(BaseUrl+"api/Users",data)}}}angular.module("EmediCodesApplication").factory("RegistrationService",RegistrationServie),RegistrationServie.$inject=["$http","EMIService"]}();
!function(){"use strict";function TreatmentCodesSummaryController($scope,EMIService,toaster,authService){var defaultRequestHeaders={headers:{"Content-Type":"application/json",Authorization:"Bearer "+localStorage.getItem("id_token")}};authService.ValidateAuthorization(defaultRequestHeaders.headers);var TreatmentSetting=EMIService.serviceChosenTreatmentSetting,ModalityID=EMIService.serviceChosenModalityID;void 0!=TreatmentSetting&&null!=TreatmentSetting&&void 0!=ModalityID&&null!=ModalityID&&function(TreatmentSetting,ModalityID){var apiResource="";void 0===TreatmentSetting||null===TreatmentSetting||""===TreatmentSetting?toaster.error("Please select a treatment setting to continue."):0===TreatmentSetting.length?toaster.error("Please select a treatment setting to continue."):"Hospital"==TreatmentSetting?(apiResource="HospitalTreatmentCodes",EMIService.GetTreatmentCodesByModality(ModalityID,apiResource,defaultRequestHeaders).then(function(response){EMIService.serviceTreatmentCodes=response,$scope.TreatmentCodes=EMIService.serviceTreatmentCodes.data})):"Global"==TreatmentSetting?toaster.error("Feature Not Implemented"):"Professional"==TreatmentSetting?toaster.error("Feature Not Implemented"):"Technical"==TreatmentSetting&&toaster.error("Feature Not Implemented")}(TreatmentSetting,ModalityID),$scope.TreatmentSetting=EMIService.serviceChosenTreatmentSetting,$scope.toggleTreatmentAmount=function(index,action){var currentRow=$scope.TreatmentCodes[index];"plus"===action?(currentRow.number_of_treatments++,currentRow.treatment_dollar_amount=currentRow.opps_payment_rate*currentRow.number_of_treatments,$scope.TreatmentCodes[index]=currentRow):"minus"===action&&(currentRow.treatment_dollar_amount=currentRow.treatment_dollar_amount-currentRow.opps_payment_rate,currentRow.number_of_treatments--,$scope.TreatmentCodes[index]=currentRow)}}angular.module("EmediCodesApplication").controller("TreatmentSummaryCtrl",TreatmentCodesSummaryController),TreatmentCodesSummaryController.$inject=["$scope","EMIService","toaster","authService"]}();
!function(){function InvalidSubscriptionController($scope,authService,EMIService,toaster,$state){var defaultRequestHeaders={headers:{"Content-Type":"application/json",Authorization:"Bearer "+localStorage.getItem("id_token")}};authService.ValidateAuthorization(defaultRequestHeaders.headers),$scope.goToPayment=function(){$state.go("payment")},$scope.contactSupport=function(){$state.go("app.bugs")}}angular.module("EmediCodesApplication").controller("InvalidSubscriptionCtrl",InvalidSubscriptionController),InvalidSubscriptionController.$inject=["$scope","authService","EMIService","toaster","$state"]}();

!function(){function DeleteCaseModalController($scope,EMIService,authService,$uibModalInstance,toaster){var defaultRequestHeaders={headers:{"Content-Type":"application/json",Authorization:"Bearer "+localStorage.getItem("id_token")}};$scope.DeleteCase=function(){var CaseID=EMIService.deleteSelectedCaseID;EMIService.DeleteCase(CaseID,defaultRequestHeaders).success(function(response){$uibModalInstance.dismiss("cancel"),toaster.pop("success","Case Successfully Deleted")}).catch(function(error){toaster.pop("error","An Error Occurred On The Server.")})},$scope.Cancel=function(){$uibModalInstance.dismiss("cancel")}}angular.module("EmediCodesApplication").controller("DeleteCaseModalCtrl",DeleteCaseModalController),DeleteCaseModalController.$inject=["$scope","EMIService","authService","$uibModalInstance","toaster"]}();
//# sourceMappingURL=all-js.min.js.map
